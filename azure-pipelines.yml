trigger:
- master
pr:
- master
jobs:
- job: run_tests
  displayName: Run Unit Tests
  variables:
    zol_rel: "0.7.12"
  pool:
    vmImage: ubuntu-16.04
  strategy:
    matrix:
      stable:
        rustup_toolchain: stable
      beta:
        rustup_toolchain: beta
      nightly:
        rustup_toolchain: nightly
  steps:
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install rust
    - script: |
        sudo apt-get update
        sudo apt-get install -y libblkid-dev libattr1-dev libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev zlib1g-dev libssl-dev
      displayName: Install dependencies
    - script: |
        ls /etc/apt/sources.list.d/
        MAKEFLAGS=-j$(($(grep -c '^processor' /proc/cpuinfo) * 2 + 1))
        sudo apt-get install -qq -y linux-headers-$(uname -r) uuid-dev tree
        cd /tmp
        curl -L https://github.com/zfsonlinux/zfs/releases/download/zfs-$ZOL_REL/spl-$ZOL_REL.tar.gz | tar xz
        curl -L https://github.com/zfsonlinux/zfs/releases/download/zfs-$ZOL_REL/zfs-$ZOL_REL.tar.gz | tar xz
        (cd spl-$ZOL_REL && ./configure --prefix=/usr && make && sudo make install) > /dev/null
        (cd zfs-$ZOL_REL && ./configure --prefix=/usr && make && sudo make install) > /dev/null
        sudo modprobe zfs
        cd $TRAVIS_BUILD_DIR
        sudo mkdir /vdevs && sudo chmod 777 /vdevs
      displayName: Install ZFS on Linux
    - script: |
        CARGO=$HOME/.cargo/bin/cargo
        RUSTFLAGS="-C link-dead-code" $CARGO test --no-run
        cargo install cargo-suity
        mkdir test-results
        RUSTFLAGS="-C link-dead-code" $CARGO suity
      displayName: Run Tests
    - script: |
        RUSTFLAGS="--cfg procmacro2_semver_exempt" cargo install cargo-tarpaulin -f
        sudo RUSTFLAGS="-C link-dead-code" $(which cargo) tarpaulin --out Xml
        bash <(curl -s https://codecov.io/bash)
      displayName: Run Coverage
      condition: and(succeeded(),eq(variables['rustup_toolchain'], 'nightly'))
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: 'test-results/default.xml'
        failTaskOnFailedTests: true

